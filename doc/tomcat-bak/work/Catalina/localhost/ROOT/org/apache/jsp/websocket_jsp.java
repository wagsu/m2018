/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.20
 * Generated at: 2015-11-03 08:30:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class websocket_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	String path = request.getContextPath();
	String basePath = "http://" + request.getServerName() + ":"
		+ request.getServerPort() + path + "/";
	String WsBasePath = "ws://" + request.getServerName() + ":"
			+ request.getServerPort() + path + "/";
	int userId=(int)Math.floor(Math.random()*1000%100);
	// userId = 46;

      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>websocket聊天室</title>\n");
      out.write("<script type=\"text/javascript\" src=\"res/js/jquery.js\"></script>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("#chat {\n");
      out.write("\ttext-align: left;\n");
      out.write("\twidth: 600px;\n");
      out.write("\theight: 600px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#up {\n");
      out.write("\ttext-align: left;\n");
      out.write("\twidth: 100%;\n");
      out.write("\theight: 400px;\n");
      out.write("\tborder: 1px solid green;\n");
      out.write("\tOVERFLOW-Y: auto;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#info {\n");
      out.write("\ttext-align: left;\n");
      out.write("\theight: 200px;\n");
      out.write("\twidth: 100%;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<h2 align=\"center\">基于HTML5的聊天室</h2>\n");
      out.write("\t<div align=\"center\" style=\"width: 100%; height: 600px;\">\n");
      out.write("\t\t<div id=\"chat\">\n");
      out.write("\t\t\t<div id=\"up\"></div>\n");
      out.write("\t\t\t<div id=\"appInfo\">\n");
      out.write("\t\t\t\t包名：<input type=\"text\" id=\"package\" value=\"cn.nubia.photosns\" style=\"width: 160px;\">\n");
      out.write("\t\t\t\t应用KEY：<input type=\"text\" id=\"app_key\" value=\"43b17b7653484b6087d6db43e33f166b\" style=\"width: 240px;\">\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t<div id=\"clientInfo\">\n");
      out.write("\t\t\t\tID：<input type=\"text\" id=\"identity\" value=\"1\" style=\"width: 160px;\">\n");
      out.write("\t\t\t\tdeviceToken：<input type=\"text\" id=\"deviceToken\" value=\"\" style=\"width: 160px;\">\n");
      out.write("\t\t\t\t<br>\n");
      out.write("\t\t\t\t别名/标签：<input type=\"text\" id=\"aliasAndTags\" value=\"{'alias':'gsy', 'tags':['test']}\" style=\"width: 240px;\">\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<br/>\n");
      out.write("\t\t<input type=\"button\" value=\"连接\" onclick=\"chat(this);\">\n");
      out.write("\t\t<input type=\"button\" id=\"sendBtn\" value=\"发送\" disabled=\"disabled\" onclick=\"send(this);\">\n");
      out.write("\t\t<input type=\"button\" id=\"sendHeartBtn\" value=\"心跳\" disabled=\"disabled\" onclick=\"sendHeart(this);\">\n");
      out.write("\t</div>\n");
      out.write("</body>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("var socket;\n");
      out.write("var receive_text = document.getElementById(\"up\");\n");
      out.write("var sendBtn = document.getElementById(\"sendBtn\");\n");
      out.write("var sendHeartBtn = document.getElementById(\"sendHeartBtn\");\n");
      out.write("\n");
      out.write("function addText(msg) {\n");
      out.write("\treceive_text.innerHTML += \"<br/>\" + msg;\n");
      out.write("\treceive_text.scrollTop = receive_text.scrollHeight;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function chat(obj) {\n");
      out.write("\tobj.disabled = \"disabled\";\n");
      out.write("\tsendBtn.disabled = \"\";\n");
      out.write("\tsendHeartBtn.disabled = \"\";\n");
      out.write("\t$('input[type=\"text\"]').attr('readonly','readonly');\n");
      out.write("\t$('#aliasAndTags').removeAttr(\"readonly\");\n");
      out.write("\tvar packageName = $('#package').val();\n");
      out.write("\tvar appKey = $('#app_key').val()\n");
      out.write("\tvar identity = $('#identity').val()\n");
      out.write("\tvar aliasAndTags = $('#aliasAndTags').val()\n");
      out.write("\tvar param = '?package=' + packageName + '&app_key=' + appKey + '&identity=' + identity + '&apk_version=240';\n");
      out.write("\tvar deviceToken = $('#deviceToken').val();\n");
      out.write("\tif (deviceToken && deviceToken != '') {\n");
      out.write("\t\tparam += '&platform=2&device_token=' + deviceToken;\n");
      out.write("\t}\n");
      out.write("\ttry{\n");
      out.write("\t\tsocket = new WebSocket('");
      out.print(WsBasePath + "websocket");
      out.write("' + param);\n");
      out.write("\t\treceive_text.innerHTML += \"<font color=green>正在连接服务器……</font>\";\n");
      out.write("\t}catch(e){\n");
      out.write("\t\treceive_text.innerHTML += \"<font color=red>抱歉，您的浏览器不支持html5，请使用IE10或者最新版本的谷歌、火狐等浏览器！</font>\";\n");
      out.write("\t}\n");
      out.write("\t//打开Socket \n");
      out.write("\tsocket.onopen = function(event) {\n");
      out.write("\t\tfalg=false;\n");
      out.write("\t\taddText(\"<font color=green>连接成功！</font>\");\n");
      out.write("\t\t// document.getElementById(\"send_btn\").disabled = false;\n");
      out.write("\t\t\n");
      out.write("\t\tsocket.send(aliasAndTags);\n");
      out.write("\t};\n");
      out.write("\tsocket.onmessage = function(event) {\n");
      out.write("\t\taddText(event.data);\n");
      out.write("\t};\n");
      out.write("\tsocket.onclose = function(event) {\n");
      out.write("\t\taddText(\"<font color=red>连接断开！</font>\");\n");
      out.write("\t\tobj.disabled = \"\";\n");
      out.write("\t\tsendBtn.disabled = \"disabled\";\n");
      out.write("\t\tsendHeartBtn.disabled = \"disabled\";\n");
      out.write("\t\t$('input[type=\"text\"]').removeAttr(\"readonly\");\n");
      out.write("\t};\n");
      out.write("};\n");
      out.write("\n");
      out.write("function send() {\n");
      out.write("\tvar aliasAndTags = $('#aliasAndTags').val();\n");
      out.write("\tsocket.send(aliasAndTags);\n");
      out.write("}\n");
      out.write("\n");
      out.write("function sendHeart() {\n");
      out.write("\tsocket.send(\"~H#C~\");\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
